@component-name = "portal-staging"
definition {
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Export/Import Framework";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test"
			);

			Page.tearDownCP();

			Site.tearDownCP();
		}
	}

	@priority = "4"
	test EditExportTemplate {
		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Blogs"
		);

		Blogs.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title"
		);

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Web Content"
		);

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "Web Content Content",
			webContentTitle = "Web Content Title"
		);

		PortletEntry.publish();

		WebContent.viewTitle(webContentTitle = "Web Content Title");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Publishing",
			panel = "Site Administration",
			portlet = "Export"
		);

		LAR.addExportTemplateCP(
			exportTemplateDescription = "Export Template Description",
			exportTemplateName = "Export Template Name"
		);

		LAR.configureExportOptions(
			checkContentNameList = "Web Content",
			uncheckContentNameList = "Blogs"
		);

		LAR.saveExportTemplateCP(
			exportTemplateDescription = "Export Template Description",
			exportTemplateName = "Export Template Name"
		);

		LAR.exportExportTemplateCP(
			exportTemplateDescription = "Export Template Description",
			exportTemplateName = "Export Template Name",
			larFileName = "Export.Template"
		);

		Pause(locator1 = "3000");

		LAR.downloadLar();

		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites"
		);

		Site.addBlankCP(siteName = "Site Name");

		LAR.importSiteCP(larFileName = "Export.Template", siteName = "Site Name");

		ProductMenu.gotoSite(site = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Web Content"
		);

		WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title");

		WebContent.viewCP(
			webContentContent = "Web Content Content",
			webContentTitle = "Web Content Title"
		);

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Publishing",
			panel = "Site Administration",
			portlet = "Export"
		);

		LexiconEntry.gotoHeaderMenuItem(menuItem = "Export Templates");

		LAR.editExportTemplateCP(
			exportTemplateDescriptionEdit = "Export Template Description Edit",
			exportTemplateName = "Export Template Name",
			exportTemplateNameEdit = "Export Template Name Edit"
		);

		LAR.configureExportOptions(checkContentNameList = "Blogs");

		LAR.saveExportTemplateCP(
			exportTemplateDescription = "Export Template Description Edit",
			exportTemplateName = "Export Template Name Edit"
		);

		LAR.exportExportTemplateCP(
			exportTemplateDescription = "Export Template Description Edit",
			exportTemplateName = "Export Template Name Edit",
			larFileName = "Edited Export Template Name"
		);

		var larFile = RegexUtil.replace("Edited Export Template Name", "([a-zA-z0-9_.-]*)[(0-9KB)]*", "1");

		AssertTextEquals.assertPartialText(
			locator1 = "SitePagesExport#CURRENT_AND_PREVIOUS_STATUS",
			value1 = "Successful"
		);

		LAR.downloadLar();

		Pause(locator1 = "5000");

		LAR.importSiteCP(larFileName = "${larFile}", siteName = "Site Name");

		ProductMenu.gotoSite(site = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Blogs"
		);

		BlogsNavigator.gotoEntryCP(entryTitle = "Blogs Entry Title");

		BlogsEntry.viewEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title"
		);
	}

	@description = "This is a use case for LPS-86501."
	@priority = "3"
	test EditImportedContentPageViaImportedSiteTemplate {
		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Site Templates"
		);

		SiteTemplates.addCP(
			siteTemplateActive = "Yes",
			siteTemplateName = "Site Template Name"
		);

		LexiconEntry.gotoEntryMenuItem(
			menuItem = "Manage",
			rowEntry = "Site Template Name"
		);

		ProductMenu.gotoPortlet(
			category = "Build",
			panel = "Site Administration",
			portlet = "Page Fragments"
		);

		FragmentsAdmin.importCollectionFromDependenciesFolder(
			collectionZipFile = "fragment-collection.zip"
		);

		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Site Templates"
		);

		SiteTemplates.addSitePageViaSiteTemplateCP(
			pageName = "Test Template Content Page",
			sitePageType = "Content Page",
			siteTemplateName = "Site Template Name"
		);

		PageEditor.addFragment(
			collectionName = "Collection Name",
			fragmentName = "Content"
		);

		PageEditor.editFragmentText(
			fragmentName = "Content",
			id = "content",
			text = "Editing Finished"
		);

		PageEditor.viewFragmentEditableText(
			editableText = "Editing Finished",
			fragmentName = "Content",
			id = "content"
		);

		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Site Templates"
		);

		LAR.exportPortlet(
			larFileName = "site-template-content-page.lar",
			portletName = "Site Templates"
		);

		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Site Templates"
		);

		SiteTemplates.deleteCP(siteTemplateName = "Site Template Name");

		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Site Templates"
		);

		LAR.importPortlet(
			larFileName = "site-template-content-page.lar",
			portletName = "Site Templates"
		);

		SiteTemplates.viewCP(siteTemplateName = "Site Template Name");

		Refresh();

		LexiconEntry.gotoEntryMenuItem(
			menuItem = "Manage",
			rowEntry = "Site Template Name"
		);

		SitePages.gotoPageMenuItem(
			menuItem = "Edit",
			pageName = "Test Template Content Page"
		);

		PageEditor.viewFragmentEditableText(
			editableText = "Editing Finished",
			fragmentName = "Content",
			id = "content"
		);

		AssertConsoleTextNotPresent(value1 = "javax.portlet.PortletException:");

		AssertConsoleTextNotPresent(value1 = "org.apache.jasper.JasperException:");

		AssertConsoleTextNotPresent(value1 = "java.lang.NullPointerException");
	}

	@priority = "5"
	test ExportImportDDLViaGlobal {
		property test.name.skip.portal.instance = "ExportImport#ExportImportDDLViaGlobal";

		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites"
		);

		Site.addBlankCP(siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Build",
			panel = "Site Administration",
			portlet = "Pages"
		);

		SitePages.addPublicPage(pageName = "Test Page");

		ProductMenu.gotoSite(site = "Global");

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Dynamic Data Lists"
		);

		DDLDataDefinition.addCP(
			ddlDataDefinitionDescription = "DDL Definition Description",
			ddlDataDefinitionName = "DDL Definition"
		);

		DynamicDataMapping.addField(
			field = "Text",
			fieldFieldLabel = "Text Label",
			fieldName = "TextName"
		);

		DDLDataDefinition.save();

		ProductMenu.gotoSite(site = "Global");

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Dynamic Data Lists"
		);

		DDLList.addCP(
			ddlListDescription = "DDL List Description",
			ddlListName = "DDL List"
		);

		DDLDataDefinition.selectCP(ddlDataDefinitionName = "DDL Definition");

		DDLDataDefinition.save();

		DDLRecord.addCP(
			ddlDataDefinitionName = "DDL Definition",
			ddlListName = "DDL List"
		);

		DDLRecord.populateFieldText(
			ddlRecordFieldData = "DDL Definition Record",
			field = "Text",
			fieldFieldLabel = "Text Label",
			fieldName = "TextName"
		);

		PortletEntry.publish();

		ProductMenu.gotoSite(site = "Global");

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Dynamic Data Lists"
		);

		LAR.exportPortlet(larFileName = "DDL.portlet.lar", siteScopeName = "Global");

		ProductMenu.gotoSite(site = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Dynamic Data Lists"
		);

		LAR.importPortlet(larFileName = "DDL.portlet.lar", siteName = "Site Name");

		Navigator.openURL();

		ProductMenu.gotoSite(site = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Dynamic Data Lists"
		);

		DDLNavigator.gotoListRecords(ddlListName = "DDL List");

		DDLRecord.viewFirstFieldCP(
			ddlRecordFieldData = "DDL Definition Record",
			field = "Text",
			fieldFieldLabel = "Text Label"
		);
	}

	@priority = "4"
	test ExportImportDeletions {
		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Web Content"
		);

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "Web Content Content",
			webContentTitle = "Web Content Title"
		);

		PortletEntry.publish();

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Web Content"
		);

		LAR.exportPortlet(larFileName = "ExportWebContent.lar");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Web Content"
		);

		WebContent.deleteCP(siteURLKey = "guest", webContentTitle = "Web Content Title");

		LAR.exportPortlet(
			exportIndividualDeletions = "true",
			larFileName = "ExportWebContentDeletion.lar"
		);

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Web Content"
		);

		LAR.importPortlet(larFileName = "ExportWebContent.lar");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Web Content"
		);

		WebContent.viewTitle(webContentTitle = "Web Content Title");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Web Content"
		);

		LAR.importPortlet(
			importDeletions = "true",
			larFileName = "ExportWebContentDeletion.lar"
		);

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Web Content"
		);

		WebContent.viewNotPresentCP(webContentTitle = "Web Content Title");
	}

	@priority = "3"
	test ExportImportPortletWithADT {
		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Build",
			panel = "Site Administration",
			portlet = "Application Display Templates"
		);

		ApplicationDisplayTemplates.addCP(
			adtFile = "adt_blogs_basic.ftl",
			adtType = "Blogs"
		);

		ProductMenu.gotoPortlet(
			category = "Build",
			panel = "Site Administration",
			portlet = "Pages"
		);

		SitePages.addPublicPage(pageName = "Test Page Name");

		Navigator.gotoPage(pageName = "Test Page Name");

		Portlet.addPG(portletName = "Blogs");

		Blogs.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title"
		);

		Navigator.gotoPage(pageName = "Test Page Name");

		ApplicationDisplayTemplates.selectPortletADT(templateName = "Blogs Test ADT");

		Navigator.gotoPage(pageName = "Test Page Name");

		var key_entryTitle = "Blogs Entry Title";

		AssertElementNotPresent(locator1 = "Link#EDIT");

		AssertElementNotPresent(locator1 = "Link#MOVE_TO_RECYCLING_BIN");

		LAR.configureExportSiteCP();

		LAR.exportSuccess();

		var valueName = selenium.getText("//ul/li/div/h5");

		echo("value name ${valueName}");

		var larFileName = RegexUtil.replace("${valueName}", "([a-zA-z0-9_.-]*)[(0-9KB)]*", "1");

		echo("file name ${larFileName}");

		LAR.downloadLar();

		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites"
		);

		Refresh();

		Site.addBlankCP(siteName = "Site Name");

		LAR.importSiteCP(larFileName = "${larFileName}", siteName = "Site Name");

		Navigator.gotoSitePage(pageName = "Test Page Name", siteName = "Site Name");

		var key_entryTitle = "Blogs Entry Title";

		AssertElementNotPresent(locator1 = "Link#EDIT");

		AssertElementNotPresent(locator1 = "Link#MOVE_TO_RECYCLING_BIN");
	}

	@priority = "5"
	test ExportImportPrivatePage {
		property portal.acceptance = "true";
		property testray.component.names = "Training";

		ProductMenu.gotoPortlet(
			category = "Build",
			panel = "Site Administration",
			portlet = "Pages"
		);

		SitePages.addPrivatePage(pageName = "Private Page");

		ProductMenu.gotoPortlet(
			category = "Publishing",
			panel = "Site Administration",
			portlet = "Export"
		);

		LAR.exportSiteCP(larFileName = "ExportPrivatePage", privateLayout = "true");

		var key_larFileName = "${larFileName}";

		AssertTextEquals.assertPartialText(
			locator1 = "SitePagesExport#CURRENT_AND_PREVIOUS_STATUS",
			value1 = "Successful"
		);

		var valueName = selenium.getText("//ul/li/div/h5");

		echo("value name ${valueName}");

		var larFileName = RegexUtil.replace("${valueName}", "([a-zA-z0-9_.-]*)[(0-9k)]*", "1");

		echo("lar file name ${larFileName}");

		LAR.downloadLar();

		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites"
		);

		Refresh();

		Site.addBlankCP(siteName = "Site Name");

		LAR.importSiteCP(
			larFileName = "${larFileName}",
			privateLayout = "true",
			siteName = "Site Name"
		);

		Navigator.gotoPrivateSitePage(pageName = "Private Page", siteName = "Site Name");
	}

	@priority = "5"
	test ExportImportSampleLARPortlet {
		property portal.acceptance = "false";
		property portlet.plugins.includes = "sample-lar-portlet";
		property test.name.skip.portal.instance = "ExportImport#ExportImportSampleLARPortlet";

		ProductMenu.gotoPortlet(
			category = "Build",
			panel = "Site Administration",
			portlet = "Pages"
		);

		SitePages.addPublicPage(pageName = "Test Page Name");

		Navigator.gotoPage(pageName = "Test Page Name");

		Portlet.addPG(portletName = "Sample LAR");

		SampleLARPortlet.addSampleBooking();

		var bookingNumber = selenium.getText("//tbody[@class='table-data']/tr/td[2]");

		echo("Booking Number ${bookingNumber}");

		SampleLARPortlet.viewSampleBookingNumber(bookingNumber = "${bookingNumber}");

		LAR.exportPortlet(larFileName = "SampleLARPortlet.lar");

		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites"
		);

		Site.addBlankCP(siteName = "Test Site Name");

		ProductMenu.gotoPortlet(
			category = "Build",
			panel = "Site Administration",
			portlet = "Pages"
		);

		SitePages.addPublicPage(pageName = "Test Site Page");

		Navigator.gotoSitePage(pageName = "Test Site Page", siteName = "Test Site Name");

		Portlet.addPG(portletName = "Sample LAR");

		LAR.importPortlet(larFileName = "SampleLARPortlet.lar");

		Navigator.gotoSitePage(pageName = "Test Site Page", siteName = "Test Site Name");

		SampleLARPortlet.viewSampleBookingNumber(bookingNumber = "${bookingNumber}");
	}

	@priority = "5"
	test ExportImportSmoke {
		property portal.acceptance = "true";
		property testray.component.names = "Training";

		User.firstLoginPG();

		LAR.exportSiteCP();

		var key_larFileName = "${larFileName}";

		AssertTextEquals.assertPartialText(
			locator1 = "SitePagesExport#CURRENT_AND_PREVIOUS_STATUS",
			value1 = "Successful"
		);

		var valueName = selenium.getText("//ul/li/div/h5");

		echo("value name ${valueName}");

		var larFileName = RegexUtil.replace("${valueName}", "([a-zA-z0-9_.-]*)[(0-9KB)]*", "1");

		echo("lar file name ${larFileName}");

		LAR.downloadLar();

		Site.openSitesAdmin();

		Site.addBlankCP(siteName = "Site Name");

		LAR.importSiteCP(larFileName = "${larFileName}", siteName = "Site Name");
	}

	@priority = "4"
	test ExportImportThemeSettings {
		property osgi.app.includes = "frontend-theme-fjord";

		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites"
		);

		Site.addBlankCP(siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Build",
			panel = "Site Administration",
			portlet = "Pages"
		);

		SitePages.addPublicPage(pageName = "Test Page");

		Page.changeCurrentTheme(pageName = "Test Page", themeName = "Fjord");

		LAR.configureExportSiteCP(
			uncheckLogo = "true",
			uncheckSitePagesSettings = "true",
			uncheckSiteTemplateSettings = "true"
		);

		AssertClick(locator1 = "SitePagesExport#EXPORT_BUTTON", value1 = "Export");

		AssertTextEquals.assertPartialText(
			locator1 = "SitePagesExport#CURRENT_AND_PREVIOUS_STATUS",
			value1 = "Successful"
		);

		var valueName = selenium.getText("//ul/li/div/h5");

		echo("value name ${valueName}");

		var larFileName = RegexUtil.replace("${valueName}", "([a-zA-z0-9_.-]*)[(0-9KB)]*", "1");

		echo("file name ${larFileName}");

		LAR.downloadLar();

		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites"
		);

		Refresh();

		Site.addBlankCP(siteName = "Site Name 2");

		LAR.importSiteCP(larFileName = "${larFileName}", siteName = "Site Name 2");

		Navigator.gotoSitePage(pageName = "Test Page", siteName = "Site Name 2");

		Page.viewCurrentTheme(
			page = "Public Pages",
			pageName = "Test Page",
			themeName = "Fjord"
		);
	}

	@priority = "5"
	test ExportImportValidation {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "ExportImport#ExportImportValidation";
		property testray.component.names = "Training";

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Documents and Media"
		);

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.jpg",
			dmDocumentTitle = "DM Document Title"
		);

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Blogs"
		);

		Blogs.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title"
		);

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Blogs"
		);

		BlogsNavigator.gotoEditCP(entryTitle = "Blogs Entry Title");

		Click.pauseClickAt(locator1 = "AlloyEditor#EDITOR", key_editor = "content");

		Click(locator1 = "AlloyEditor#CONTENT_ADD_BUTTON");

		Click(locator1 = "AlloyEditor#CONTENT_ADD_MENUBAR_IMAGE");

		ItemSelector.selectDMImage(
			imageFileName = "DM Document Title",
			navTab = "Documents and Media"
		);

		PortletEntry.publish();

		LAR.configureExportSiteCP(
			checkContentNameList = "Blogs",
			mainContent = "Blogs",
			uncheckContentNameList = "Documents and Media",
			uncheckSubContent = "Referenced Content"
		);

		LAR.exportSuccess();

		var valueName = selenium.getText("//ul/li/div/h5");

		echo("value name ${valueName}");

		var larFileName = RegexUtil.replace("${valueName}", "([a-zA-z0-9_.-]*)[(0-9KB)]*", "1");

		echo("file name ${larFileName}");

		LAR.downloadLar();

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Documents and Media"
		);

		DMDocument.deleteCP(dmDocumentTitle = "DM Document Title");

		Refresh();

		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites"
		);

		Site.addBlankCP(siteName = "Site Name");

		LAR.importSiteCP(
			importValidationMissingItem = "DM Document Title",
			larFileName = "${larFileName}",
			siteName = "Site Name"
		);
	}

	@priority = "4"
	test ExportImportWithExportTemplate {
		property test.name.skip.portal.instance = "ExportImport#ExportImportWithExportTemplate";

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Publishing",
			panel = "Site Administration",
			portlet = "Export"
		);

		LAR.addExportTemplateCP(
			exportTemplateDescription = "Export Template Description",
			exportTemplateName = "Export Template Name"
		);

		LAR.saveExportTemplateCP(
			exportTemplateDescription = "Export Template Description",
			exportTemplateName = "Export Template Name"
		);

		LAR.viewExportTemplateCP(
			exportTemplateDescription = "Export Template Description",
			exportTemplateName = "Export Template Name"
		);

		LAR.exportExportTemplateCP(
			exportTemplateDescription = "Export Template Description",
			exportTemplateName = "Export Template Name"
		);

		var valueName = selenium.getAttribute("//ul/li/div/h5//a@href");

		echo("value name ${valueName}");

		var larFileName = RegexUtil.replace("${valueName}", "http://localhost:8080/documents/portlet_file_entry/[0-9]*/([a-zA-z0-9_.-]*)[(0-9KB)]*", "1");

		echo("file name ${larFileName}");

		LAR.downloadLar();

		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites"
		);

		Site.addBlankCP(siteName = "Site Name");

		LAR.importSiteCP(larFileName = "${larFileName}", siteName = "Site Name");
	}

	@priority = "5"
	test ImportCorruptedFile {
		property portal.acceptance = "true";
		property portal.release = "false";

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Bookmarks"
		);

		AssertTextEquals(locator1 = "Portlet#HEADER", value1 = "Bookmarks");

		LAR.importPortlet(
			cannotImport = "true",
			larFileName = "bookmarks-corrupted.portlet.lar",
			uploadFrom = "dependencies"
		);
	}

	@description = "This is a use case for LPS-54392."
	@priority = "5"
	test ImportProcessWithoutErrorMessage {
		property portal.acceptance = "abel";

		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites"
		);

		Site.addBlankCP(siteName = "Site Name A");

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Web Content"
		);

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "Web Content Content",
			webContentTitle = "Web Content Title"
		);

		PortletEntry.publish();

		ProductMenu.gotoPortlet(
			category = "Publishing",
			panel = "Site Administration",
			portlet = "Export"
		);

		LAR.exportSiteCP(larFileName = "SiteName1");

		LAR.downloadLar();

		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites"
		);

		Refresh();

		Site.addBlankCP(siteName = "Site Name B");

		ProductMenu.gotoPortlet(
			category = "Build",
			panel = "Site Administration",
			portlet = "Pages"
		);

		SitePages.addPublicPage(pageName = "Test Page");

		Navigator.gotoSitePage(pageName = "Test Page", siteName = "Site Name B");

		Portlet.addPG(portletName = "Web Content Display");

		WebContentDisplayPortlet.selectParentSiteWebContent(
			parentSiteName = "Site Name A",
			webContentTitle = "Web Content Title"
		);

		WebContent.viewPGViaWCD(webContentContent = "Web Content Content");

		ProductMenu.gotoPortlet(
			category = "Publishing",
			panel = "Site Administration",
			portlet = "Export"
		);

		LAR.exportSiteCP(larFileName = "SiteName2");

		LAR.downloadLar();

		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites"
		);

		Site.deleteCP(siteName = "Site Name A");

		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites"
		);

		Site.deleteCP(siteName = "Site Name B");

		Site.addBlankCP(siteName = "Site Name C");

		LAR.importSiteCP(
			importValidationMissingItem = "Web Content Title",
			larFileName = "SiteName2",
			siteName = "Site Name C"
		);

		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites"
		);

		Site.deleteCP(siteName = "Site Name C");

		Site.addBlankCP(siteName = "Site Name D");

		LAR.importSiteCP(
			larFileName = "SiteName1",
			siteName = "Site Name D"
		);

		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites"
		);

		Site.addBlankCP(siteName = "Site Name E");

		LAR.importSiteCP(
			larFileName = "SiteName2",
			siteName = "Site Name E"
		);
	}
}